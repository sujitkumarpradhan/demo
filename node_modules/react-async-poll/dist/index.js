'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _promise = require('promise');

var _promise2 = _interopRequireDefault(_promise);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var asyncPoll = function asyncPoll() {
	var intervalDuration = arguments.length <= 0 || arguments[0] === undefined ? 60 * 1000 : arguments[0];
	var onInterval = arguments[1];


	return function (Component) {
		return function (_React$Component) {
			_inherits(_class, _React$Component);

			function _class() {
				_classCallCheck(this, _class);

				var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(_class).call(this));

				_this.startPolling = _this.startPolling.bind(_this);
				_this.stopPolling = _this.stopPolling.bind(_this);
				return _this;
			}

			_createClass(_class, [{
				key: 'componentDidMount',
				value: function componentDidMount() {
					this.startPolling();
				}
			}, {
				key: 'componentWillUnmount',
				value: function componentWillUnmount() {
					this.stopPolling();
				}
			}, {
				key: 'startPolling',
				value: function startPolling() {
					if (this.interval) return;
					this.keepPolling = true;
					this.asyncInterval(intervalDuration, onInterval);
				}
			}, {
				key: 'stopPolling',
				value: function stopPolling() {
					this.keepPolling = false;
					if (this.interval) clearTimeout(this.interval);
				}
			}, {
				key: 'asyncInterval',
				value: function asyncInterval(intervalDuration, fn) {
					var _this2 = this;

					var promise = fn(this.getProps(), this.props.dispatch);
					var asyncTimeout = function asyncTimeout() {
						return setTimeout(function () {
							_this2.asyncInterval(intervalDuration, fn);
						}, intervalDuration);
					};
					var assignNextInterval = function assignNextInterval() {
						if (!_this2.keepPolling) return _this2.stopPolling();
						_this2.interval = asyncTimeout();
					};

					_promise2.default.resolve(promise).then(assignNextInterval).catch(assignNextInterval);
				}
			}, {
				key: 'getProps',
				value: function getProps() {
					return _extends({}, this.props, {
						startPolling: this.startPolling,
						stopPolling: this.stopPolling,
						isPolling: Boolean(this.interval)
					});
				}
			}, {
				key: 'render',
				value: function render() {
					var props = this.getProps();
					return _react2.default.createElement(Component, props);
				}
			}]);

			return _class;
		}(_react2.default.Component);
	};
};

exports.default = asyncPoll;